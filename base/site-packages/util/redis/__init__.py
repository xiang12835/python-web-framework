#encoding=utf-8

from django.conf import settings
import redis

servers = settings.redis_servers

_pool0 = redis.ConnectionPool(**servers[0])

_pool1 = redis.ConnectionPool(**servers[1])



class RedisProxy(redis.Redis):


    REDIS_READ_CMD = {
        'KEYS': 1,
        'GET': 1,
        'HGET': 1,
        'HKEYS': 1,
        'LLEN': 1,
        'SDIFF': 1,
        'SISMEMBER': 1,
        'SMEMBERS': 1,
        'ZREVRANGEBYSCORE': 1,
        'ZRANGEBYSCORE': 1,  # 需要增加这个读命令，不然这个命令会执行_execute_write函数
    }

    _c0 = None
    _c1 = None


    def __init__(self, pool0, pool1):
        if RedisProxy._c0 is None:
            RedisProxy._c0 = redis.Redis(connection_pool=pool0)
        if RedisProxy._c1 is None:
            RedisProxy._c1 = redis.Redis(connection_pool=pool1)

        self.c0 = RedisProxy._c0
        self.c1 = RedisProxy._c1

        self.c0_conn = True
        self.c1_conn = True

    def execute_command(self, *args, **options):
        if args and args[0] in RedisProxy.REDIS_READ_CMD:
            return self._execute_read(*args, **options)
        else:
            return self._execute_write(*args, **options)

    def _execute_read(self, *args, **options):
        try:
            result = self.c0.execute_command(*args, **options)
        except Exception as e:
            #logging.error(e)
            self.c0_conn = False
            try:
                result = self.c1.execute_command(*args, **options)
            except Exception as e:
                #logging.error(e)
                self.c1_conn = False
                result = None
        return result

    def _execute_write(self, *args, **options):
        try:
            result = self.c0.execute_command(*args, **options)
        except Exception as e:
            #logging.error(e)
            self.c0_conn = False
            result = None

        try:
            _result = self.c1.execute_command(*args, **options)
        except Exception as e:
            #logging.error(e)
            self.c1_conn = False
            _result = None
        return result or _result







def client():
    return RedisProxy(_pool0, _pool1)
    #return redis.Redis(connection_pool=_pool0)